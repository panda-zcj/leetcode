/**
 * 
 * Copyright (c) 2018 南京航空航天大学 航空通信网络研究室
 * 
 * @file     d:\code\c_source_code\leetcode\10.cpp
 * @author   詹长建 (2233930937@qq.com)
 * @date     2018-12
 * @brief    
 * @version  0.0.1
 * 
 * Last Modified:  2018-12-29
 * Modified By:    詹长建 (2233930937@qq.com)
 * 
 */
/*
给定一个字符串 (s) 和一个字符模式 (p)。实现支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符。
'*' 匹配零个或多个前面的元素。
匹配应该覆盖整个字符串 (s) ，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: '*' 代表可匹配零个或多个前面的元素, 即可以匹配 'a' 。因此, 重复 'a' 一次, 字符串可变为 "aa"。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个('*')任意字符('.')。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 'c' 可以不被重复, 'a' 可以被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
*/

#include <iostream>
#include <vector>
#include <hash_map>
#include <string>
#include <cmath>
using namespace std;

class Solution {
public:
    bool isMatch(string s, string p) {
        int i_start,j_start;
        int s_len=s.size(),p_len=s.size();
        if(s_len==0||p_len==0){
            return false;
        }
        for(int i=0;i<s_len;i++){
            for(int j=0;j<p_len;j++)
            {
               if(p.at(j)==s.at(i)){
                   j_start=j;
                   i_start=i;
               }else if(p.at(j)=='*'){
                   if((j-1)>0){
                       p.at(j-1);
                       
                   }
               }else if(p.at(j)=='.'){
                   j_start=j;
                   i_start=i;

               }else{
                   if((j+1)<p_len){
                       if(p.at(j+1)=='*')
                       {
                           continue;
                       }
                   }
                   break;
               }  
            }
            
        }
    }
};